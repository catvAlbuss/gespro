/**
 * üß† ROUTE-LOADER v2.1 (Optimizado para Laravel + Vite)
 * -----------------------------------------------------
 * Carga din√°mica de m√≥dulos JS, JSX y VUE basados en data-module.
 * Cada vista Blade define qu√© m√≥dulo cargar sin sobrecargar app.js.
 * 
 * ‚úÖ Ventajas:
 * - Lazy loading por vista (reduce el tama√±o inicial del bundle)
 * - Soporta React, Vue y JS puro
 * - Compatible con build de Vite
 * - Logs claros y √∫tiles para depuraci√≥n
 * - Cachea m√≥dulos ya cargados (√∫til en Livewire o SPA parcial)
 */

console.info("‚úÖ route-loader inicializado");

const container = document.querySelector("[data-module]");

if (!container) {
    console.warn("‚ö†Ô∏è No se encontr√≥ ning√∫n elemento con [data-module].");
} else {
    const moduleName = container.dataset.module;
    console.info(`üîç Intentando cargar m√≥dulo din√°mico: ${moduleName}`);

    // Cache local para evitar recargar m√≥dulos ya importados
    const moduleCache = new Map();

    const importModule = async () => {
        try {
            // Escanea todos los archivos dentro de /resources/js/
            const modules = import.meta.glob("../**/*.{js,jsx,vue}");

            // Buscar coincidencia flexible del m√≥dulo solicitado
            const matchKey = Object.keys(modules).find((key) =>
                key.includes(`${moduleName}.js`) ||
                key.includes(`${moduleName}.jsx`) ||
                key.includes(`${moduleName}.vue`) ||
                key.includes(moduleName) // Permite coincidencia parcial
            );

            if (matchKey) {
                // Evitar doble carga del mismo m√≥dulo
                if (moduleCache.has(matchKey)) {
                    console.log(`‚ö° M√≥dulo ya cargado: ${matchKey}`);
                    return;
                }

                // Importaci√≥n as√≠ncrona
                await modules[matchKey]();
                moduleCache.set(matchKey, true);
                console.log(`‚úÖ M√≥dulo cargado correctamente: ${matchKey}`);
            } else {
                console.error(`‚ùå No se encontr√≥ m√≥dulo: ${moduleName}`);
                console.groupCollapsed("üìã M√≥dulos disponibles:");
                console.table(Object.keys(modules));
                console.groupEnd();
            }
        } catch (err) {
            console.error(`üí• Error cargando m√≥dulo "${moduleName}"`, err);
        }
    };

    importModule();
}
